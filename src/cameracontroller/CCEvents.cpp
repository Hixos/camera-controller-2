/**
 * Copyright (c) 2020
 * Authors: Luca Erbetta (luca.erbetta105@gmail.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 ******************************************************************************
 *                  THIS FILE IS AUTOGENERATED. DO NOT EDIT.                  *
 ******************************************************************************
 */

// Autogen date:    2020-07-26 14:01:58.867932

#include "CCEvents.h"

#include <map>
#include <string>

using std::map;
using std::string;

const map<uint16_t, string> event_string = {
    {EV_CAMERA_CONNECT, "EV_CAMERA_CONNECT"},
    {EV_CAMERA_CONNECTED, "EV_CAMERA_CONNECTED"},
    {EV_CAMERA_CONNECTION_ERROR, "EV_CAMERA_CONNECTION_ERROR"},
    {EV_CAMERA_DISCONNECT, "EV_CAMERA_DISCONNECT"},
    {EV_CAMERA_DISCONNECTED, "EV_CAMERA_DISCONNECTED"},
    {EV_CAMERA_GENERIC_ERROR, "EV_CAMERA_GENERIC_ERROR"},
    {EV_CAMERA_SET_CONFIG, "EV_CAMERA_SET_CONFIG"},
    {EV_CAMERA_GET_STATUS, "EV_CAMERA_GET_STATUS"},
    {EV_CAMERA_VAL_CONFIG, "EV_CAMERA_VAL_CONFIG"},
    {EV_CAMERA_VAL_STATUS, "EV_CAMERA_VAL_STATUS"},
    {EV_CAMERA_GET_OPTIONS, "EV_CAMERA_GET_OPTIONS"},
    {EV_CAMERA_OPTIONS_SHUTTER_SPEED, "EV_CAMERA_OPTIONS_SHUTTER_SPEED"},
    {EV_CAMERA_OPTIONS_APERTURE, "EV_CAMERA_OPTIONS_APERTURE"},
    {EV_CAMERA_OPTIONS_ISO, "EV_CAMERA_OPTIONS_ISO"},
    {EV_CAMERA_OPTIONS_TRIGGER_MODE, "EV_CAMERA_OPTIONS_TRIGGER_MODE"},
    {EV_CAMERA_CAPTURE_WIRED, "EV_CAMERA_CAPTURE_WIRED"},
    {EV_CAMERA_CAPTURE_SUCCESS, "EV_CAMERA_CAPTURE_SUCCESS"},
    {EV_CAMERA_CAPTURE_ERROR, "EV_CAMERA_CAPTURE_ERROR"},
    {EV_CAMERA_DOWNLOAD, "EV_CAMERA_DOWNLOAD"}};

const map<uint8_t, string> topic_string = {
    {TOPIC_CAMERA_CMD, "TOPIC_CAMERA_CMD"},
    {TOPIC_CAMERA_EVENT, "TOPIC_CAMERA_EVENT"},
    {TOPIC_CAMERA_STATUS, "TOPIC_CAMERA_STATUS"}};

string getEventName(uint16_t ev)
{
    if (event_string.count(ev) > 0)
        return event_string.at(ev);
    else
    {
        return std::to_string(ev);
    }
}

string getTopicName(uint8_t topic)
{
    if (topic_string.count(topic) > 0)
        return topic_string.at(topic);
    else
    {
        return std::to_string(topic);
    }
}